var visibleLines = [],
  scrollTimer,
  unloadEventFired = !1;
function recordVisibleLines(action) {
  var currentTime,
    visibleLine = {
      action: action,
      time: Math.floor(Date.now() / 1e3),
      line: null,
    };
  isElementInViewport($("#analytics_start"))
    ? (visibleLine.line = "a")
    : isElementInViewport($("#analytics_end"))
    ? (visibleLine.line = "z")
    : ($("#honbun p").each(function (index, element) {
        if (isElementInViewportCenter($(element))) {
          var lineNumber = parseInt($(element).attr("id"));
          if (!isNaN(lineNumber)) return (visibleLine.line = lineNumber), !1;
        }
      }),
      visibleLine.line ||
        (isElementInViewport($("#maegaki"))
          ? (visibleLine.line = "b")
          : isElementInViewport($("#atogaki")) && (visibleLine.line = "y"))),
    visibleLines.push(visibleLine);
}
function sendDataToServer() {
  if (visibleLines.length <= 1) return !1;
  var n_vid = parseInt($("#n_vid").data("vid"));
  if (isNaN(n_vid)) return !1;
  if (-1 == document.cookie.indexOf("autologin")) return !1;
  var serverUrl = "https://syosetu.org/novel/record/" + n_vid + "/",
    dataToSend = visibleLines
      .map(function (item) {
        return [item.action, item.time, item.line].join(",");
      })
      .join("|");
  if (navigator.sendBeacon)
    var success = navigator.sendBeacon(serverUrl, dataToSend);
  else
    $.ajax({
      type: "POST",
      async: !1,
      url: serverUrl,
      data: dataToSend,
      success: function (response) {},
      error: function (xhr, status, error) {},
    });
  visibleLines = [];
}
function isElementInViewport($el) {
  if (!$el || 0 === $el.length) return !1;
  var rect = $el[0].getBoundingClientRect();
  return (
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <= ($(window).height() || $(document).height()) &&
    rect.right <= ($(window).width() || $(document).width())
  );
}
function isElementInViewportCenter($el) {
  if (!$el || 0 === $el.length) return !1;
  var rect = $el[0].getBoundingClientRect(),
    windowHeight = window.innerHeight || document.documentElement.clientHeight,
    elementHeight = $el.outerHeight(),
    elementCenterY = (rect.top + rect.bottom) / 2,
    viewportCenterY = windowHeight / 2,
    verticalThreshold = 0.25 * windowHeight;
  return Math.abs(elementCenterY - viewportCenterY) < verticalThreshold;
}
$(function () {
  recordVisibleLines("start");
}),
  $(window).on("beforeunload", function () {
    unloadEventFired ||
      ((unloadEventFired = !0), recordVisibleLines("end"), sendDataToServer());
  }),
  $(window).on("pagehide", function () {
    unloadEventFired ||
      ((unloadEventFired = !0), recordVisibleLines("end"), sendDataToServer());
  }),
  $(document).on("visibilitychange", function () {
    unloadEventFired || "hidden" !== document.visibilityState
      ? ((unloadEventFired = !1), recordVisibleLines("start"))
      : ((unloadEventFired = !0),
        recordVisibleLines("end"),
        sendDataToServer());
  }),
  $(window).on("scroll", function () {
    clearTimeout(scrollTimer),
      (scrollTimer = setTimeout(function () {
        recordVisibleLines("scroll");
      }, 1e3));
  });
